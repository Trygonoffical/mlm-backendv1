import logging
from mlm.celery import app
from utils.msg91_email_utils import MSG91EmailService
from home.models import MLMMember, Notification

logger = logging.getLogger(__name__)

@app.task(name='notifications.send_kyc_approval')
def send_kyc_approval_notification_task(member_id):
    """
    Send KYC approval notification to a member
    
    Args:
        member_id (str): The MLM member ID
    """
    try:
        # Get the member
        try:
            member = MLMMember.objects.get(member_id=member_id)
        except MLMMember.DoesNotExist:
            logger.error(f"Member with ID {member_id} not found")
            return False
            
        # Send the email notification
        email_service = MSG91EmailService()
        result = email_service.send_kyc_approved_email(member)
        
        if result['success']:
            logger.info(f"KYC approval email sent to member {member_id}")
            
            # Create notification
            Notification.objects.create(
                title="KYC Verification Complete",
                message="Your KYC documents have been verified successfully. You can now enjoy full benefits of your membership.",
                notification_type='INDIVIDUAL',
                recipient=member
            )
            return True
        else:
            logger.error(f"Failed to send KYC approval email to member {member_id}: {result['message']}")
            return False
            
    except Exception as e:
        logger.error(f"Error sending KYC approval notification to member {member_id}: {str(e)}")
        return False

@app.task(name='notifications.send_commission_notification')
def send_commission_notification_task(member_id, amount, from_member_id=None, commission_type="MONTHLY"):
    """
    Send commission notification to a member
    
    Args:
        member_id (str): The MLM member ID receiving the commission
        amount (float): The commission amount
        from_member_id (str, optional): The member ID who generated the commission
        commission_type (str): The type of commission (MONTHLY, ORDER, etc.)
    """
    try:
        # Get the member
        try:
            member = MLMMember.objects.get(member_id=member_id)
        except MLMMember.DoesNotExist:
            logger.error(f"Member with ID {member_id} not found")
            return False
            
        # Get the from_member if provided
        from_member = None
        if from_member_id:
            try:
                from_member = MLMMember.objects.get(member_id=from_member_id)
            except MLMMember.DoesNotExist:
                logger.warning(f"From member {from_member_id} not found")
                
        # Create notification message
        title = "Commission Received"
        
        if commission_type == "MONTHLY":
            message = f"You have received a monthly commission of ₹{amount}."
        elif commission_type == "ORDER":
            message = f"You have received an order commission of ₹{amount}."
        elif commission_type == "BONUS":
            message = f"You have received a bonus commission of ₹{amount}."
        else:
            message = f"You have received a commission of ₹{amount}."
            
        if from_member:
            from_name = from_member.user.get_full_name() or from_member.member_id
            message += f" Commission generated by {from_name}."
            
        # Create notification
        Notification.objects.create(
            title=title,
            message=message,
            notification_type='INDIVIDUAL',
            recipient=member
        )
        
        logger.info(f"Commission notification created for member {member_id}")
        return True
            
    except Exception as e:
        logger.error(f"Error creating commission notification for member {member_id}: {str(e)}")
        return False